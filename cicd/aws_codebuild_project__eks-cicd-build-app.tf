# File generated by aws2tf see https://github.com/aws-samples/aws2tf
# aws_codebuild_project.eks-cicd-build-app:
# CodeBuild 프로젝트 리소스를 제공
resource "aws_codebuild_project" "eks-cicd-build-app" {
  # badge_enabled- (선택 사항) 프로젝트 빌드 배지에 대해 공개적으로 액세스할 수 있는 URL을 생성하는지.
  badge_enabled  = false
  # build_timeout- (선택 사항) AWS CodeBuild가 완료된 것으로 표시되지 않은 관련 빌드 시간이 초과될 때까지 대기하는 시간(5~480분(8시간))입니다. 기본값은 60분
  build_timeout  = 60
  # encryption_key- (선택 사항) 빌드 프로젝트의 빌드 출력 아티팩트를 암호화하는 데 사용할 AWS Key Management Service(AWS KMS) 고객 마스터 키(CMK)
  encryption_key = data.aws_kms_alias.s3.arn
  # name- (필수) 프로젝트 이름.
  name           = "eks-cicd-build-app"
  # queued_timeout- (선택 사항) 시간이 초과되기 전에 빌드가 대기할 수 있는 시간(5분에서 480분(8시간))입니다. 기본값은 8시간입니다.
  queued_timeout = 480
  # # depends_on 의존성을 명시적으로 선언. 아래 선언된 리소스가 생성될 때까지 기다림
  depends_on     = [aws_iam_role.codebuild-eks-cicd-build-app-service-role]
  # service_role- (필수) AWS CodeBuild가 AWS 계정을 대신하여 종속 AWS 서비스와 상호 작용할 수 있도록 하는 AWS Identity and Access Management(IAM) 역할의 Amazon 리소스 이름(ARN).
  service_role   = aws_iam_role.codebuild-eks-cicd-build-app-service-role.arn
  # source_version- (선택 사항) 이 프로젝트에 대해 빌드할 빌드 입력의 버전입니다. 지정하지 않으면 최신 버전이 사용됩니다.
  source_version = "refs/heads/master"
  tags           = {}

  artifacts {
    # encryption_disabled- (선택 사항) 출력 아티팩트 암호화를 비활성화할지 여부
    encryption_disabled    = false
    # override_artifact_name(선택 사항) 빌드 사양에 지정된 이름이 아티팩트 이름을 재정의하는지 여부.
    override_artifact_name = false
    # type- (필수) 출력 아티팩트의 유형을 빌드합니다.
    # '아티팩트 없음'으로 설정 -> Docker 이미지를 빌드하여 Amazon ECR에 푸시하는 경우 또는 소스 코드에 단위 테스트를 실행하고 빌드하지 않는 경우 등 이 시퀀스가 필요하지 않기 때문.
    type                   = "NO_ARTIFACTS"
  }

  cache {
    modes = []
    # 캐시된 리소스를 저장하지 않음
    type  = "NO_CACHE"
  }

  environment {
    # compute_type- (필수) 빌드 프로젝트에서 사용할 컴퓨팅 리소스에 대한 정보
    compute_type                = "BUILD_GENERAL1_SMALL"
    # image- (필수) 이 빌드 프로젝트에 사용할 Docker 이미지
    image                       = "aws/codebuild/amazonlinux2-x86_64-standard:3.0"
    # image_pull_credentials_type- (선택 사항) AWS CodeBuild가 빌드에서 이미지를 가져오는 데 사용하는 자격 증명 유형
    image_pull_credentials_type = "CODEBUILD"
    # privileged_mode- (선택 사항) Docker 컨테이너 내에서 Docker 데몬 실행을 활성화할지 여부
    privileged_mode             = false
    # type- (필수) 관련 빌드에 사용할 빌드 환경의 유형
    type                        = "LINUX_CONTAINER"
  }

  logs_config {
    # cloudwatch 로그 활성화
    cloudwatch_logs {
      status = "ENABLED"
    }

    # s3 로그 비활성화
    s3_logs {
      encryption_disabled = false
      status              = "DISABLED"
    }
  }

  source {
    # git_clone_depth- (선택 사항) 이 많은 커밋에 대해 자식 기록을 자릅니다.
    git_clone_depth     = 1
    # insecure_ssl- (선택 사항) 소스 제어에 연결할 때 SSL 경고를 무시하는지 여부
    insecure_ssl        = false
    # 소스 코드의 위치
    location            = aws_codecommit_repository.eksworkshop-app.clone_url_http
    # report_build_status- (선택 사항) 빌드 시작 및 완료 상태를 소스 공급자에게 보고할지 여부
    report_build_status = false
    # type- (필수) 빌드할 소스 코드가 포함된 저장소 유형
    type                = "CODECOMMIT"

    git_submodules_config {
      # fetch_submodules- (필수) AWS CodeBuild 빌드 프로젝트에 대한 Git 하위 모듈을 가져올지 여부
      fetch_submodules = false
    }
  }

  vpc_config {
    # security_group_ids- (필수) 실행 중인 빌드에 할당할 보안 그룹 ID
    security_group_ids = [
      data.aws_security_group.cicd.id,
    ]
    # subnets- (필수) 빌드를 실행할 서브넷 ID
    subnets = [
      data.aws_subnet.cicd.id,
    ]
    # vpc_id- (필수) 빌드를 실행할 VPC의 ID
    vpc_id = data.aws_vpc.cicd.id
  }
}

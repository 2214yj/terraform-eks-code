# File generated by aws2tf see https://github.com/aws-samples/aws2tf
# CodePipeline을 제공
resource "aws_codepipeline" "pipe-eksworkshop-app" {
  ## 1. 파이프라인 설정 선택
  # name- (필수) 파이프라인의 이름
  name       = "pipe-eksworkshop-app"
  # depends_on 의존성을 명시적으로 선언. 아래 선언된 리소스가 생성될 때까지 기다림
  depends_on = [aws_iam_role.AWSCodePipelineServiceRole-pipe-eksworkshop-app]
  # role_arn- (필수) 사용자를 대신하여 AWS 서비스를 호출할 수 있는 권한을 AWS CodePipeline에 부여하는 서비스 역할 Amazon 리소스 이름(ARN).
  role_arn   = aws_iam_role.AWSCodePipelineServiceRole-pipe-eksworkshop-app.arn
  tags       = {}


  ## 파이프라인의 아티팩트 위치
  # artifact_store(필수) 하나 이상의 artifact_store 블록
  # artifact_store블록은 다음 인수를 지원
  artifact_store {
    # location- (필수) AWS CodePipeline이 파이프라인에 대한 아티팩트를 저장하는 위치. 현재 S3만 지원됩니다.
    location = aws_s3_bucket.codepipeline-bucket.bucket
    # type- (필수) Amazon S3와 같은 아티팩트 저장소 유형
    type     = "S3"
  }

  ## 2. 소스 스테이지 추가
  # stage(최소 두 개의 stage블록이 필요합니다.) 스테이지 블록. 각 스테이지마다 여려 활동을 병렬로 처리 가능
  stage {
    # name- (필수) 스테이지 이름.
    name = "Source"

    # action- (필수) 단계에 포함할 작업
    action {
      # category- (필수) 카테고리는 단계에서 수행할 수 있는 작업의 종류를 정의하고 작업에 대한 공급자 유형을 제한
      # 가능한 값은  Source, Test, Approval, Build, Deploy및 Invoke, 입니다 (CodePipeline 에 대한 유효한 범주)
      category = "Source"
      # configuration- (선택 사항) 작업 선언 구성의 맵
      configuration = {
        "BranchName"           = "master"
        "OutputArtifactFormat" = "CODE_ZIP"
        # PollForSourceChanges: CodePipeline이 소스 변경 사항에 대해 CodeCommit 리포지토리를 폴링할지 여부를 제어
        # true: 설정된 경우 CodePipeline은 소스 변경 사항에 대해 리포지토리를 폴링합니다.
        # false: 설정된 경우 CodePipeline은 소스 변경 사항에 대해 리포지토리를 폴링하지 않습니다. 소스 변경을 감지하도록 CloudWatch 이벤트 규칙을 구성하려는 경우 이 설정을 사용하십시오.
        "PollForSourceChanges" = "true"
        "RepositoryName"       = "eksworkshop-app"
      }
      # input_artifacts- (선택 사항) 작업할 아티팩트 이름 목록
      input_artifacts = []
      # name- (필수) 작업 선언의 이름
      name            = "Source"
      # namespace- (선택 사항) 모든 출력 변수에 액세스할 네임스페이스
      namespace       = "SourceVariables"
      # output_artifacts- (선택 사항) 출력할 아티팩트 이름 목록
      output_artifacts = [
        "SourceArtifact",
      ]
      # owner- (필수) 호출되는 작업의 작성자
      owner     = "AWS"
      # provider- (필수) 작업에 의해 호출되는 서비스 제공자
      provider  = "CodeCommit"
      # region- (선택 사항) 작업을 실행할 지역
      region    = data.aws_region.current.name
      # run_order- (선택 사항) 작업이 실행되는 순서
      run_order = 1
      # version- (필수) 작업 유형을 식별하는 문자열
      version   = "1"
    }
  }

  ## 3. 빌드 스테이지 추가
  # stage(최소 두 개의 stage블록이 필요합니다.) 스테이지 블록.
  stage {
    # name- (필수) 스테이지 이름.
    name = "Build"
    # action- (필수) 단계에 포함할 작업
    action {
      # category- (필수) 카테고리는 단계에서 수행할 수 있는 작업의 종류를 정의하고 작업에 대한 공급자 유형을 제한
      # 가능한 값은  Approval, Build, Deploy및 Invoke, Source, Test입니다
      category = "Build"
      # configuration- (선택 사항) 작업 선언 구성의 맵
      configuration = {
        "ProjectName" = "eks-cicd-build-app"
      }
      # input_artifacts- (선택 사항) 작업할 아티팩트 이름 목록
      input_artifacts = [
        "SourceArtifact",
      ]
      name      = "Build"
      namespace = "BuildVariables"
      output_artifacts = [
        "BuildArtifact",
      ]
      owner     = "AWS"
      provider  = "CodeBuild"
      region    = data.aws_region.current.name
      run_order = 1
      version   = "1"
    }
  }
}
